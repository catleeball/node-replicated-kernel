[package]
name = "bespin"
version = "0.0.1"
authors = [
  "Gerd Zellweger <mail@gerdzellweger.com>",
]

description = "Experimental OS kernel"
readme = "README.md"
license = "MIT"
build = "build.rs"
edition = "2018"


[dependencies]
# Our own dependencies:
x86 = { path = "../lib/x86" }
raw-cpuid = { path = "../lib/cpuid" }
klogger = { path = "../lib/klogger" }
slabmalloc = { path = "../lib/slabmalloc" }
elfloader = { path = "../lib/elfloader" }
backtracer = { path = "../lib/backtracer/" }
apic = { path = "../lib/apic/" }
driverkit = { path = "../lib/driverkit/" }
lineup = { path = "../lib/lineup", optional = true }
rawtime = { path = "../lib/rawtime" }
custom_error = { path = "../lib/custom_error" }
topology = { path = "../lib/topology" }
node-replication = { path = "../lib/node-replication" }
kpi = { path = "../lib/kpi" }
# External libraries we use:
spin = "0.5.2"
log = "0.4"
uefi = { version = "0.3.2", features = ["exts"] }
arrayvec = { version = "0.5.1", default-features = false, features = ["array-sizes-129-255"] }
lazy_static = { version = "1.3", features = ["spin_no_std"] }
logos = { version = "0.9.7", default-features = false, features = ["export_derive"] }
# Finally some external crates I forked due to issues with the current upstream version:
cstr_core = { git = "https://github.com/gz/cstr_core.git", default-features = false } # Some weirdness in Cargo dependency resolution currently pulls in libc so we use a patched cstr_core
acpica-sys = { git = "https://github.com/gz/acpica-sys.git" } # Need to upstream fixes
addr2line = { git = "https://github.com/gz/addr2line.git", branch = "patch-1", default-features = false, features = ["alloc", "rustc-demangle"] }

[[bin]]
name = "bespin"

[target.'cfg(not(target_os = "none"))'.dependencies]
libc = { version = "0.2.53", default-features = false }

[target.'cfg(not(target_os = "none"))'.dev-dependencies]
rexpect = "0.3"
matches = "0.1.8"

[build-dependencies]
cc = "1.0"

[features]
# Run an integration test instead of standard kernel main function
integration-test = []
# Don't boot entire system. only initialize bsp core
bsp-only = []
# exit: test qemu exit functionality (used heavily for CI)
test-exit = ["integration-test", "bsp-only"]
# pfault-early: test page-fault handler early on during init
test-pfault-early = ["bsp-only"]
# gpfault-early: test general protection fault handler early on during init
test-gpfault-early = ["bsp-only"]
# pfault: test page-fault handler
test-pfault = ["integration-test", "bsp-only"]
# gpfault: test general protection fault handler
test-gpfault = ["integration-test", "bsp-only"]
# double_fault: test double fault handler
test-double-fault = ["bsp-only"]
# alloc: testÂ memory allocation
test-alloc = ["integration-test", "bsp-only"]
# sse: test SIMD register are usable
test-sse = ["integration-test", "bsp-only"]
# test time
test-time = ["integration-test", "bsp-only"]
# scheduler: test cooperative scheduler
test-scheduler = [ "integration-test", "lineup", "bsp-only" ]
# acpi: test ACPI can initialize
test-acpi-smoke = [ "integration-test", "bsp-only" ]
# acpi: test ACPI with complex topology
test-acpi-topology = [ "integration-test", "bsp-only" ]
# coreboot: Test that we can boot-up additional cores
test-coreboot-smoke = ["integration-test", "bsp-only" ]
# coreboot: Test that we can boot-up additional cores
test-coreboot-nrlog = ["integration-test", "bsp-only" ]
# userspace: run a test in user-space by spawning the init process
test-userspace = ["integration-test", "bsp-only"]
